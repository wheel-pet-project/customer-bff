/*
 * Customer BFF
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using OpenApiContractV1.Converters;

namespace OpenApiContractV1.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetCheckByIdResponse : IEquatable<GetCheckByIdResponse>
    {
        /// <summary>
        /// Gets or Sets CheckId
        /// </summary>
        [Required]
        [DataMember(Name="checkId", EmitDefaultValue=true)]
        public Guid CheckId { get; set; }

        /// <summary>
        /// Gets or Sets BookingId
        /// </summary>
        [Required]
        [DataMember(Name="bookingId", EmitDefaultValue=true)]
        public Guid BookingId { get; set; }

        /// <summary>
        /// Gets or Sets VehicleId
        /// </summary>
        [Required]
        [DataMember(Name="vehicleId", EmitDefaultValue=true)]
        public Guid VehicleId { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [Required]
        [DataMember(Name="start", EmitDefaultValue=true)]
        public DateTime Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=true)]
        public DateTime End { get; set; }

        /// <summary>
        /// Gets or Sets Fixations
        /// </summary>
        [DataMember(Name="fixations", EmitDefaultValue=false)]
        public List<Fixation> Fixations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCheckByIdResponse {\n");
            sb.Append("  CheckId: ").Append(CheckId).Append("\n");
            sb.Append("  BookingId: ").Append(BookingId).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Fixations: ").Append(Fixations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetCheckByIdResponse)obj);
        }

        /// <summary>
        /// Returns true if GetCheckByIdResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GetCheckByIdResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCheckByIdResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CheckId == other.CheckId ||
                    
                    CheckId.Equals(other.CheckId)
                ) && 
                (
                    BookingId == other.BookingId ||
                    
                    BookingId.Equals(other.BookingId)
                ) && 
                (
                    VehicleId == other.VehicleId ||
                    
                    VehicleId.Equals(other.VehicleId)
                ) && 
                (
                    Start == other.Start ||
                    
                    Start.Equals(other.Start)
                ) && 
                (
                    End == other.End ||
                    
                    End.Equals(other.End)
                ) && 
                (
                    Fixations == other.Fixations ||
                    Fixations != null &&
                    other.Fixations != null &&
                    Fixations.SequenceEqual(other.Fixations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CheckId.GetHashCode();
                    
                    hashCode = hashCode * 59 + BookingId.GetHashCode();
                    
                    hashCode = hashCode * 59 + VehicleId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    
                    hashCode = hashCode * 59 + End.GetHashCode();
                    if (Fixations != null)
                    hashCode = hashCode * 59 + Fixations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetCheckByIdResponse left, GetCheckByIdResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetCheckByIdResponse left, GetCheckByIdResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
