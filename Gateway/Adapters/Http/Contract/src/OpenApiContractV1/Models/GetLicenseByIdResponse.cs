/*
 * Customer BFF
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using OpenApiContractV1.Converters;

namespace OpenApiContractV1.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetLicenseByIdResponse : IEquatable<GetLicenseByIdResponse>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [Required]
        [DataMember(Name="accountId", EmitDefaultValue=true)]
        public Guid AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public DrivingLicenseStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [Required]
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [Required]
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CityOfBirth
        /// </summary>
        [Required]
        [DataMember(Name="cityOfBirth", EmitDefaultValue=false)]
        public string CityOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [Required]
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public DateOnly DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets CodeOfIssue
        /// </summary>
        [Required]
        [DataMember(Name="codeOfIssue", EmitDefaultValue=false)]
        public string CodeOfIssue { get; set; }

        /// <summary>
        /// Gets or Sets DateOfIssue
        /// </summary>
        [Required]
        [DataMember(Name="dateOfIssue", EmitDefaultValue=true)]
        public DateOnly DateOfIssue { get; set; }

        /// <summary>
        /// Gets or Sets DateOfExpiry
        /// </summary>
        [Required]
        [DataMember(Name="dateOfExpiry", EmitDefaultValue=true)]
        public DateOnly DateOfExpiry { get; set; }

        /// <summary>
        /// Gets or Sets FrontPhotoS3Url
        /// </summary>
        [DataMember(Name="frontPhotoS3Url", EmitDefaultValue=false)]
        public string FrontPhotoS3Url { get; set; }

        /// <summary>
        /// Gets or Sets BackPhotoS3Url
        /// </summary>
        [DataMember(Name="backPhotoS3Url", EmitDefaultValue=false)]
        public string BackPhotoS3Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetLicenseByIdResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CityOfBirth: ").Append(CityOfBirth).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  CodeOfIssue: ").Append(CodeOfIssue).Append("\n");
            sb.Append("  DateOfIssue: ").Append(DateOfIssue).Append("\n");
            sb.Append("  DateOfExpiry: ").Append(DateOfExpiry).Append("\n");
            sb.Append("  FrontPhotoS3Url: ").Append(FrontPhotoS3Url).Append("\n");
            sb.Append("  BackPhotoS3Url: ").Append(BackPhotoS3Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetLicenseByIdResponse)obj);
        }

        /// <summary>
        /// Returns true if GetLicenseByIdResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GetLicenseByIdResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetLicenseByIdResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    AccountId == other.AccountId ||
                    
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    other.Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    CityOfBirth == other.CityOfBirth ||
                    CityOfBirth != null &&
                    CityOfBirth.Equals(other.CityOfBirth)
                ) && 
                (
                    DateOfBirth == other.DateOfBirth ||
                    
                    DateOfBirth.Equals(other.DateOfBirth)
                ) && 
                (
                    CodeOfIssue == other.CodeOfIssue ||
                    CodeOfIssue != null &&
                    CodeOfIssue.Equals(other.CodeOfIssue)
                ) && 
                (
                    DateOfIssue == other.DateOfIssue ||
                    
                    DateOfIssue.Equals(other.DateOfIssue)
                ) && 
                (
                    DateOfExpiry == other.DateOfExpiry ||
                    
                    DateOfExpiry.Equals(other.DateOfExpiry)
                ) && 
                (
                    FrontPhotoS3Url == other.FrontPhotoS3Url ||
                    FrontPhotoS3Url != null &&
                    FrontPhotoS3Url.Equals(other.FrontPhotoS3Url)
                ) && 
                (
                    BackPhotoS3Url == other.BackPhotoS3Url ||
                    BackPhotoS3Url != null &&
                    BackPhotoS3Url.Equals(other.BackPhotoS3Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (CityOfBirth != null)
                    hashCode = hashCode * 59 + CityOfBirth.GetHashCode();
                    
                    hashCode = hashCode * 59 + DateOfBirth.GetHashCode();
                    if (CodeOfIssue != null)
                    hashCode = hashCode * 59 + CodeOfIssue.GetHashCode();
                    
                    hashCode = hashCode * 59 + DateOfIssue.GetHashCode();
                    
                    hashCode = hashCode * 59 + DateOfExpiry.GetHashCode();
                    if (FrontPhotoS3Url != null)
                    hashCode = hashCode * 59 + FrontPhotoS3Url.GetHashCode();
                    if (BackPhotoS3Url != null)
                    hashCode = hashCode * 59 + BackPhotoS3Url.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetLicenseByIdResponse left, GetLicenseByIdResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetLicenseByIdResponse left, GetLicenseByIdResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
