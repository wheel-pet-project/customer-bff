/*
 * Customer BFF
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using OpenApiContractV1.Converters;

namespace OpenApiContractV1.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VehicleInSquareShortView : IEquatable<VehicleInSquareShortView>
    {
        /// <summary>
        /// Gets or Sets VehicleId
        /// </summary>
        [DataMember(Name="vehicleId", EmitDefaultValue=true)]
        public Guid VehicleId { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets CarModelId
        /// </summary>
        [DataMember(Name="carModelId", EmitDefaultValue=false)]
        public string CarModelId { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=true)]
        public Color Color { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehicleInSquareShortView {\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  CarModelId: ").Append(CarModelId).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VehicleInSquareShortView)obj);
        }

        /// <summary>
        /// Returns true if VehicleInSquareShortView instances are equal
        /// </summary>
        /// <param name="other">Instance of VehicleInSquareShortView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleInSquareShortView other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VehicleId == other.VehicleId ||
                    
                    VehicleId.Equals(other.VehicleId)
                ) && 
                (
                    Brand == other.Brand ||
                    Brand != null &&
                    Brand.Equals(other.Brand)
                ) && 
                (
                    CarModelId == other.CarModelId ||
                    CarModelId != null &&
                    CarModelId.Equals(other.CarModelId)
                ) && 
                (
                    Color == other.Color ||
                    
                    Color.Equals(other.Color)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + VehicleId.GetHashCode();
                    if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                    if (CarModelId != null)
                    hashCode = hashCode * 59 + CarModelId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Color.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VehicleInSquareShortView left, VehicleInSquareShortView right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VehicleInSquareShortView left, VehicleInSquareShortView right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
