/*
 * Customer BFF
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using OpenApiContractV1.Converters;

namespace OpenApiContractV1.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetRentByIdResponse : IEquatable<GetRentByIdResponse>
    {
        /// <summary>
        /// Идентификатор аренды
        /// </summary>
        /// <value>Идентификатор аренды</value>
        [DataMember(Name="rentId", EmitDefaultValue=false)]
        public string RentId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public RentStatus Status { get; set; }

        /// <summary>
        /// Идентификатор бронирования
        /// </summary>
        /// <value>Идентификатор бронирования</value>
        [DataMember(Name="bookingId", EmitDefaultValue=false)]
        public string BookingId { get; set; }

        /// <summary>
        /// Идентификатор клиента
        /// </summary>
        /// <value>Идентификатор клиента</value>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Идентификатор транспортного средства
        /// </summary>
        /// <value>Идентификатор транспортного средства</value>
        [DataMember(Name="vehicleId", EmitDefaultValue=false)]
        public string VehicleId { get; set; }

        /// <summary>
        /// Дата начала аренды
        /// </summary>
        /// <value>Дата начала аренды</value>
        [DataMember(Name="start", EmitDefaultValue=true)]
        public DateTime Start { get; set; }

        /// <summary>
        /// Дата окончания аренды
        /// </summary>
        /// <value>Дата окончания аренды</value>
        [DataMember(Name="end", EmitDefaultValue=true)]
        public DateTime End { get; set; }

        /// <summary>
        /// Фактическая сумма аренды
        /// </summary>
        /// <value>Фактическая сумма аренды</value>
        [DataMember(Name="actual_amount", EmitDefaultValue=true)]
        public double ActualAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetRentByIdResponse {\n");
            sb.Append("  RentId: ").Append(RentId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BookingId: ").Append(BookingId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ActualAmount: ").Append(ActualAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetRentByIdResponse)obj);
        }

        /// <summary>
        /// Returns true if GetRentByIdResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GetRentByIdResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetRentByIdResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RentId == other.RentId ||
                    RentId != null &&
                    RentId.Equals(other.RentId)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    BookingId == other.BookingId ||
                    BookingId != null &&
                    BookingId.Equals(other.BookingId)
                ) && 
                (
                    CustomerId == other.CustomerId ||
                    CustomerId != null &&
                    CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    VehicleId == other.VehicleId ||
                    VehicleId != null &&
                    VehicleId.Equals(other.VehicleId)
                ) && 
                (
                    Start == other.Start ||
                    
                    Start.Equals(other.Start)
                ) && 
                (
                    End == other.End ||
                    
                    End.Equals(other.End)
                ) && 
                (
                    ActualAmount == other.ActualAmount ||
                    
                    ActualAmount.Equals(other.ActualAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RentId != null)
                    hashCode = hashCode * 59 + RentId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (BookingId != null)
                    hashCode = hashCode * 59 + BookingId.GetHashCode();
                    if (CustomerId != null)
                    hashCode = hashCode * 59 + CustomerId.GetHashCode();
                    if (VehicleId != null)
                    hashCode = hashCode * 59 + VehicleId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    
                    hashCode = hashCode * 59 + End.GetHashCode();
                    
                    hashCode = hashCode * 59 + ActualAmount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetRentByIdResponse left, GetRentByIdResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetRentByIdResponse left, GetRentByIdResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
