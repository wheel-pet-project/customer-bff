/*
 * Customer BFF
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using OpenApiContractV1.Attributes;
using OpenApiContractV1.Models;

namespace OpenApiContractV1.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class VehicleCheckApiController : ControllerBase
    { 
        /// <summary>
        /// Добавление отметок повреждений
        /// </summary>
        /// <param name="checkId">Идентификатор проверки</param>
        /// <param name="addDamageFixationsRequest"></param>
        /// <response code="200">Успешная операция</response>
        /// <response code="500">Внутренняя ошибка сервера</response>
        [HttpPost]
        [Route("/vehiclecheck/{checkId}/add-damage-fixations")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddDamageFixationsToCheck")]
        public abstract Task<IActionResult> AddDamageFixationsToCheck([FromRoute (Name = "checkId")][Required]Guid checkId, [FromBody]AddDamageFixationsRequest addDamageFixationsRequest);

        /// <summary>
        /// Завершение проверки автомобиля
        /// </summary>
        /// <param name="checkId">Идентификатор проверки</param>
        /// <response code="200">Успешная операция</response>
        /// <response code="500">Внутренняя ошибка сервера</response>
        [HttpPost]
        [Route("/vehiclecheck/{checkId}/complete-check")]
        [ValidateModelState]
        [SwaggerOperation("CompleteCheck")]
        public abstract Task<IActionResult> CompleteCheck([FromRoute (Name = "checkId")][Required]Guid checkId);

        /// <summary>
        /// Получение информации о проверке автомобиля по идентификатору
        /// </summary>
        /// <param name="checkId">Идентификатор проверки</param>
        /// <response code="200">Успешная операция</response>
        /// <response code="500">Внутренняя ошибка сервера</response>
        [HttpGet]
        [Route("/vehiclecheck/{checkId}")]
        [ValidateModelState]
        [SwaggerOperation("GetCheckById")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCheckByIdResponse), description: "Успешная операция")]
        public abstract Task<IActionResult> GetCheckById([FromRoute (Name = "checkId")][Required]Guid checkId);

        /// <summary>
        /// Начало проверки автомобиля
        /// </summary>
        /// <param name="startCheckRequest"></param>
        /// <response code="200">Успешная операция</response>
        /// <response code="500">Внутренняя ошибка сервера</response>
        [HttpPost]
        [Route("/vehiclecheck/start-check")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("StartCheck")]
        [SwaggerResponse(statusCode: 200, type: typeof(StartCheckResponse), description: "Успешная операция")]
        public abstract Task<IActionResult> StartCheck([FromBody]StartCheckRequest startCheckRequest);
    }
}
